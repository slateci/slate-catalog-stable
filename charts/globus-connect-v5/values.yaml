Instance: ""

# The following must be created *before* instantiating a GCSv5 container. 
# Before creating this container, you *must* do the following:
# * Login on globus.org and in settings>developers, select the project
#   that the endpoint will be registered in
# * Add an app and under the type, select 'Register a Globus Connect Server'
# * Create a new registration with the appropriate fields 
# * Make sure to record the client uuid since this will be needed
# * Create a new client secret and record the secret (this is the only 
#   time it will be displayed)
# * On a system with the globus connect 5.4 rpms installed, run
#   globus-connect-server endpoint setup [endpoint_name] --contact-email [email] -o [globus_id] --organization [org] -c [client_uuid from above]
# * The setup will request the secret that you generated and then create a deployment-key.json file that you *must* keep 
#
# Create a new file with the contents:
#   GLOBUS_CLIENT_ID=<client_uuid>
#   GLOBUS_CLIENT_SECRET=<secret>
#   DEPLOYMENT_KEY=<contents of deployment-key.json>
# And then create the credential with:
#   slate secret create <secret-name> --group <group> --cluster <cluster> \
#    --from-env-file <filename>
GlobusCredentialSecret: globus-creds # maps to <secret-name> as in the above

# The following provides extra parameters to pass to the server
# in particular, things like --ip-address if you need to specify the ip address
NodeSetupArgs: ""

# The following file must contain usernames and encrypted passwords for any 
# users who may log in to the system. 
# 
# The file must follow passwd(5) format. 
#
# Once this file has been created, store it as a SLATE secret with:
#
#   slate secret create <secret-name> --group <group> --cluster <cluster> \
#     --from-file passwd=<filename>
GlobusPasswdSecret: globus-passwd # maps to <secret-name> as in the above


# The path at which the storage should be mounted. 
ExternalPath: /export
# The path for a backing filesystem to be mounted from the host system. 
InternalPath: /tmp
# The name of a PersistentVolumeClaim which should be mounted as backing storage.
PVCName:

# The following settings only need to be changed if you
# want to use the experimental auto-configuration features

EndpointConfiguration: false # don't automatically configure endpoint

# ignore the following unless you're using auto-configuration
StorageConfig:
  StorageType: "posix"  # posix or ceph, ceph will have globus use a S3 endpoint
  DisplayName: ""       # name for storage collection
  AllowedUsers: []      # array with users allowed to access the gateway
  DeniedUsers: []       # array with users blocked from accessing gateway
  Domain: []            # allowed domains for users
  RestrictPaths: false  # Use GlobusRestrictConfig for restrictPaths 
  CustomIdentityMapping: false  # Use GlobusIdentityConfig for restrictPaths 
  CephConfig:           # only needed if StorageType is set to ceph
    S3Endpoint: ""
    AdminKey:  ""
    SecretKey: ""
    Bucket: ""
  PosixConfig:          # only needed if StorageType is set to posix
    DeniedGroups: []
    AllowedGroups: []

CollectionConfig:
  BasePath: "" 
  DisplayName: ""
  Department: ""
  Organization: ""
  ContactEmail: ""
  ContactInfo: ""
  Description: ""
  IdentityId: ""
  UserMessage: ""

# the GlobusIdentityConfig and GlobusRestrictConfig settings are only
# used for auto-configuration and don't need to be changed for the 
# default settings
# the following file should include an identity mapping for globus
# See https://docs.globus.org/globus-connect-server/v5/identity-mapping-guide/ 
# for instructions on how to format the file
GlobusIdentityConfig: globus-identity-mapping 
#
GlobusRestrictConfig: globus-restrict-config 
  #
# If set, use a nodeSelector to run only on a matching nodes. 
# This is useful when only certain nodes on the cluster mount the appropriate 
# backing filesystem. It may be desirable to turn this off when using a PVC as
# backing storage, since this tends not to tie to a specific node. 
# e.g., "NodeSelector: globus" will match nodes with "globus=true"
# NodeSelector: globus
### SLATE-START ###
SLATE:
  Instance:
    ID: "untagged"
### SLATE-END ###
